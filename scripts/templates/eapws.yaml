heat_template_version: 2013-05-23

description: >
  HOT template to create a new neutron network plus a router to the public
  network, and for deploying five servers into the new network. The template also
  assigns floating IP addresses to each server so they are routable from the
  public network.

parameters:
  public_net_id:
    type: string
    description: Public network for floating IP addresses
  private_net_name:
    type: string
    default: demo-net
    description: Private network name
  private_net_cidr:
    type: string
    default: 172.16.5.0/24
    description: Private network addresses
  private_net_gateway:
    type: string
    default: 172.16.5.1
    description: Private network gateway address
  private_net_pool_start:
    type: string
    default: 172.16.5.2
    description: Private network IP address allocation pool start
  private_net_pool_end:
    type: string
    default: 172.16.5.254
    description: Private network IP address allocation pool end
  dns_nameservers:
     type: string
     default: [10.16.143.247]
  key_name:
    type: string
    description: Server keypair name
    default: demokp
  image:
    type: string
    description: Server image name
    default: rhel-server7
  flavor:
    type: string
    description: Server flavor
    default: m1.small
    constraints:
      - allowed_values: [m1.small, m1.medium, m1.large]
        description: InstanceType must be m1.small, m1.medium or m1.large
  volume_size:
    type: number
    description: Volume size
    default: 4
    constraints:
      - range: { min: 1, max: 1024 }
        description: must be between 1 and 1024 Gb.

resources:
  private_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: private_net_name }

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: { get_param: private_net_cidr }
      gateway_ip: { get_param: private_net_gateway }
      dns_nameservers: { get_param: dns_nameservers }
      allocation_pools:
        - start: { get_param: private_net_pool_start }
          end: { get_param: private_net_pool_end }

  router:
    type: OS::Neutron::Router

  router_gateway:
    type: OS::Neutron::RouterGateway
    properties:
      router_id: { get_resource: router }
      network_id: { get_param: public_net_id }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }

  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Server security group rules
      name: security-group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 443 
          port_range_max: 443
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 8080
          port_range_max: 8080
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

  server1:
    type: OS::Nova::Server
    properties:
      name: db1
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server1_port }
      user_data_format: RAW
      user_data:
        str_replace:
          #cloud-init
          template: |
            write_files:
              - content: |
                  #!/bin/bash
                  uid="%uid%"
                  uid_dev="/dev/disk/by-id/virtio-$(echo ${uid} | cut -c -20)"
                  mkfs.ext4 ${uid_dev}
                  mkdir -pv /var/lib/db
                  echo "${uid_dev} /var/lib/db ext4 defaults 1 2" >> /etc/fstab
                  mount /var/lib/db
                path: /tmp/format-disk.sh
                permissions: '0700'
            runcmd:
              - /tmp/format-disk.sh
          params:
            "%uid%": { get_resource: cinder_volume }

  cinder_volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
  volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: cinder_volume }
      instance_uuid: { get_resource: server1 }
      mountpoint: /dev/vdb

  server1_port:
    type: OS::Neutron::Port
    properties:
      security_groups: [{ get_resource: security_group }]
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }

  server2:
    type: OS::Nova::Server
    properties:
      name: lb1
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server2_port }
      user_data:

  server2_port:
    type: OS::Neutron::Port
    properties:
      security_groups: [{ get_resource: security_group }]
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }

  server2_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: server2_port }

  server3:
    type: OS::Nova::Server
    properties:
      name: ms1
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server3_port }
      user_data:

  server3_port:
    type: OS::Neutron::Port
    properties:
      security_groups: [{ get_resource: security_group }]
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }

  server3_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: server3_port }

  server4:
    type: OS::Nova::Server
    properties:
      name: ms2
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server4_port }
      user_data:

  server4_port:
    type: OS::Neutron::Port
    properties:
      security_groups: [{ get_resource: security_group }]
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }

  server4_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: server4_port }

  server5:
    type: OS::Nova::Server
    properties:
      name: ms3
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server5_port }
      user_data:

  server5_port:
    type: OS::Neutron::Port
    properties:
      security_groups: [{ get_resource: security_group }]
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }

  server5_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: server5_port }

outputs:
  server1_private_ip:
    description: IP address of server1 in private network
    value: { get_attr: [ server1, first_address ] }
  server2_private_ip:
    description: IP address of server2 in private network
    value: { get_attr: [ server2, first_address ] }
  server2_public_ip:
    description: Floating IP address of server2 in public network
    value: { get_attr: [ server2_floating_ip, floating_ip_address ] }
  server3_private_ip:
    description: IP address of server3 in private network
    value: { get_attr: [ server3, first_address ] }
  server3_public_ip:
    description: Floating IP address of server3 in public network
    value: { get_attr: [ server3_floating_ip, floating_ip_address ] }
  server4_private_ip:
    description: IP address of server4 in private network
    value: { get_attr: [ server4, first_address ] }
  server4_public_ip:
    description: Floating IP address of server4 in public network
    value: { get_attr: [ server4_floating_ip, floating_ip_address ] }
  server5_private_ip:
    description: IP address of server5 in private network
    value: { get_attr: [ server5, first_address ] }
  server5_public_ip:
    description: Floating IP address of server5 in public network
    value: { get_attr: [ server5_floating_ip, floating_ip_address ] }
